<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tristan Knight's Blog</title><link>https://tristanknight.github.io/</link><description></description><atom:link href="https://tristanknight.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:tk1824@nyu.edu"&gt;Tristan Knight&lt;/a&gt; </copyright><lastBuildDate>Mon, 24 Feb 2020 10:21:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Integrating Bootstrap with Django</title><link>https://tristanknight.github.io/posts/integrating-bootstrap-with-django/</link><dc:creator>Tristan Knight</dc:creator><description>&lt;div&gt;&lt;p&gt;A couple days ago I worked through &lt;a href="https://www.obeythetestinggoat.com/book/chapter_prettification.html"&gt;chapter 8&lt;/a&gt; 
of &lt;a href="https://www.obeythetestinggoat.com/"&gt;Obey the Testing Goat&lt;/a&gt;. The chapter covers testing layout and styling in Django
as well as integrating &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; with Django. I found this chapter interesting, and so I decided to 
learn a little more about Bootstrap and CSS styling with Django.&lt;/p&gt;
&lt;h5&gt;A brief overview of Bootstrap&lt;/h5&gt;
&lt;p&gt;Bootstrap is a popular front-end CSS framework that makes it easier to add 
styles to a website. Bootstrap includes a host of built-in CSS classes that enable the use of a variety of different styles
and components without needing to write the CSS yourself. Bootstrap also provides Javascript plugins that enable various components to function properly.
 Bootstrap's documentation explains a variety of different component classes in detail. For example,
see the &lt;a href="https://getbootstrap.com/docs/4.4/components/buttons/"&gt;documentation page on buttons&lt;/a&gt;.    &lt;/p&gt;
&lt;h5&gt;Using Bootstrap with Django -- An example from &lt;em&gt;Obey the Testing Goat&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;There are two ways to integrate Bootstrap with Django. The &lt;strong&gt;first way&lt;/strong&gt;, which is used in the book, involves downloading 
Bootstrap and placing the Bootstrap files in your project directory. This method requires a little bit more setup than
the second one, but it allows for offline testing 
of the HTML templates. Once the Bootstrap files are in your project directory, you can then add links to the directory location
Bootstrap CSS in your HTML base template, like so:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/bootstrapcsslink.png" width="600"&gt;&lt;/p&gt;
&lt;p&gt;Here, the link tag refers to the location of the bootstrap.min.css file in the project directory. Any HTML files that inherit
from the base class won't need this link. You will also need to make a few changes in order to configure your static files for deployment.
 For more details see 
&lt;a href="https://www.obeythetestinggoat.com/book/chapter_prettification.html#_what_we_glossed_over_collectstatic_and_other_static_directories"&gt;chapter 8&lt;/a&gt;
 of &lt;em&gt;Obey the Testing Goat&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;second way&lt;/strong&gt; is to simply place links to Bootstrap files in your base HTML file. You may also need to place links into 
other HTML files if they don't inherit from a base file.
  These links allow requests to be served through Bootstrap's 
  &lt;a href="https://en.wikipedia.org/wiki/Content_delivery_network"&gt;content delivery network (CDN)&lt;/a&gt;. 
  This method requires a bit less setup, but the downside is that serving requests through 
  the CDN requires an internet connection each time you want to run a functional test of your site.
  The &lt;a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/"&gt;Bootstrap documentation&lt;/a&gt; explains 
how to quickly get started using Bootstrap with the Bootstrap CDN.&lt;/p&gt;
&lt;p&gt;Once Bootstrap is set up, you can use utilize a variety of CSS classes within your templates. 
As a basic example, let's look at web application I'm building through following  &lt;em&gt;Obey the Testing Goat&lt;/em&gt;. Here's the 
HTML for the body of the homepage prior to using Bootstrap:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/prebootstraphtml.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;This relatively barebones HTML corresponds to this webpage:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/originalsite.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;The content from the HTML file appears perfectly fine on the page, but the styling isn't very good, as 
the form is very off-center and the text is probably too small. After adding Bootstrap CSS classes and refactoring key 
functionality to a base HTML file, the body of the HTML file looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/basehtmlfile.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the key HTML is mostly the same as in the original, but now we've added several CSS classes from Bootstrap
to improve the styling for the site. Note the container class, which contains row and column elements and is used to create boxed 
content (also note the row and column classes within the container). Within those classes, there's a text-center class,
 which centers the header text. After adding the Bootstrap classes, the homepage now looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/formattedsite.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;It's still not the most attractive page, but now it's at least well-centered and more easily readable. Of course, there's far
more that you can do with Bootstrap, and we could make plenty further improvements the styling, such as adding color,
 designing buttons, improving the layout, and a host of other possibilities (for some ideas, 
 see the Bootstrap documentation). But this does show that Bootstrap offers 
 a considerable amount of customizability with relatively few lines of code.
And if Bootstrap doesn't offer the right styling functionality, you can of course 
write your own CSS files to style the page in whichever ways you want. &lt;/p&gt;
&lt;p&gt;While I've just had a small amount of exposure to Bootstrap, I'd like to continue learning about it and hope to delve into 
its more advanced features in the future as I continue to work on backend development with Django.&lt;/p&gt;&lt;/div&gt;</description><guid>https://tristanknight.github.io/posts/integrating-bootstrap-with-django/</guid><pubDate>Thu, 20 Feb 2020 11:56:20 GMT</pubDate></item><item><title>Using Poetry to Manage Dependencies in Python</title><link>https://tristanknight.github.io/posts/using-poetry-to-manage-dependencies-in-python/</link><dc:creator>Tristan Knight</dc:creator><description>&lt;div&gt;&lt;p&gt;A couple weeks ago, I started using &lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt; to
manage my projects' dependencies. So far, I have found it very helpful for quickly starting new projects and managing the dependencies of 
my existing projects. &lt;/p&gt;
&lt;h5&gt;What is Poetry?&lt;/h5&gt;
&lt;p&gt;Poetry is a dependency and packaging management tool for Python. With Poetry,
it's easy to create a new project and manage its dependencies. &lt;/p&gt;
&lt;h5&gt;Getting Started with Poetry&lt;/h5&gt;
&lt;p&gt;The &lt;a href="https://python-poetry.org/docs/"&gt;Poetry documentation&lt;/a&gt; explains how Poetry works in more detail. But it's quite easy to get started; first, you need 
install Poetry. On MacOS, you can install Poetry in the command line by running &lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once Poetry is installed, you can create a new project in your 
 current directory by running &lt;code&gt;poetry new project_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A project created with Poetry will have some built-in files, one of which is 
called "pyproject.toml"; this is where you can specify the dependencies the project will use.&lt;/p&gt;
&lt;p&gt;My pyproject.toml file for this blog looks like this: &lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/pyprojecttoml.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;As you can see, this project doesn't have very many dependencies, but for projects that require lots of dependencies,
it's helpful to be able to quickly add them to a single file. Poetry also includes syntax for specifying the 
version constraints for a given dependency, which you can read 
about &lt;a href="https://python-poetry.org/docs/dependency-specification/"&gt;here&lt;/a&gt;. If you want to quickly add a dependency to 
pyproject.toml without opening the file, you can do so via the command line with &lt;code&gt;poetry add dependency_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you've added the dependencies you need for the project, run &lt;code&gt;poetry install&lt;/code&gt;
in the project directory to install the dependencies (you still need to do this even if you haven't manually 
added any dependencies to the pyproject.toml file). Poetry will then create a poetry.lock file in your project
directory which contains the exact versions of the installed dependencies. Committing this file to your project's
repository ensures that everyone working on the project is locked-in to the same version of each
dependency.&lt;/p&gt;
&lt;p&gt;After installation, Poetry will also automatically create a virtual environment for your project
if one doesn't already exist, but you'll probably need to configure your text editor or IDE to work with 
that virtual environment. If you're using PyCharm, you can simply navigate to the project interpreter settings,
either by clicking the button on the bottom-right of the PyCharm UI (as shown below), 
or by opening PyCharm's settings and navigating from there. &lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/bottomright.png" width="600"&gt;&lt;/p&gt;
&lt;p&gt;Select "add interpreter" to open this window:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/addinterpreter.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;Select "existing environment" and then navigate to your project in the the pypoetry directory.
In order to select the correct interpreter, you need to find the pypoetry directory. 
For me, the pypoetry directory was located at &lt;/p&gt;
&lt;p&gt;/Users/username/Library/Caches/pypoetry &lt;/p&gt;
&lt;p&gt;Once in the pypoetry directory, navigate to &lt;/p&gt;
&lt;p&gt;/virtualenvs/name-of-project/bin &lt;/p&gt;
&lt;p&gt;and select "python" as your interpreter. If you don't see the name of your project in the virtualenvs folder,
 that means you probably forgot to run &lt;code&gt;poetry install&lt;/code&gt; in your project directory. After selecting the correct
 interpreter, restart the command line, and then your project's virtual environment should be good-to-go! &lt;/p&gt;&lt;/div&gt;</description><guid>https://tristanknight.github.io/posts/using-poetry-to-manage-dependencies-in-python/</guid><pubDate>Tue, 18 Feb 2020 11:28:43 GMT</pubDate></item><item><title>Mocking in Python Unit Testing  </title><link>https://tristanknight.github.io/posts/mocking-in-python-unit-testing/</link><dc:creator>Tristan Knight</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently, I wrote some unit tests for a Sudoku game project that I've been working on.
However, due to the nature of the project, some functions would be difficult to test without making
use of mocking. Python has a built-in unittest.mock library that includes helpful tools for implementing
mock objects in Python. &lt;/p&gt;
&lt;h5&gt;What is mocking and why is it used?&lt;/h5&gt;
&lt;p&gt;In unit testing, mocking is replacing part of a program you are testing with a mock version. 
Mocking enables developers to write self-contained tests in cases where the actual implementation is reliant on 
complex underlying classes or requests to external services. For example, if a given function includes a request to 
gather information from a webpage, we probably wouldn't want our test of that function to actually gather the information.
Instead, we could mock the request so that we are simply testing the function's handling of the information gathered.&lt;/p&gt;
&lt;p&gt;Additionally, mock tests can save time if running the program's actual implementation is time consuming. 
For a more detailed explanation of how mocking is used in Python,
 &lt;a href="https://semaphoreci.com/community/tutorials/getting-started-with-mocking-in-python"&gt;see this blog post&lt;/a&gt; or 
 the &lt;a href="https://docs.python.org/3/library/unittest.mock.html"&gt;unittest.mock documentation&lt;/a&gt;. &lt;/p&gt;
&lt;h5&gt;How I've used mocking in my project&lt;/h5&gt;
&lt;p&gt;When I was working on a &lt;a href="https://en.wikipedia.org/wiki/Sudoku"&gt;Sudoku&lt;/a&gt; program, I needed to write a 
unit test for a function that checks whether a number in a given cell conflicts with any other cells: &lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/checkconflicts.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;As you can see, this function depends on self.game.puzzle, the program's implementation of the Sudoku puzzle, 
which is constructed in a different class. Additionally, the program's implementation of the Sudoku puzzle 
 in turn relies on other classes and functions. It would therefore be quite complicated to write a test that uses
  the program's implementation. Therefore, in order to reduce complexity, I 
created a mock version of the Sudoku puzzle to test the conflict-checking function.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/testcheckconflicts.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;In the mocked version, there is a class that mocks the Sudoku puzzle. In my test class,
I then set the variable puzzle equal to an array of the desired test-case board values.
I can then create an instance of the MockSudokuGame class, passing in puzzle, then setup the desired test
case and run the test. If I didn't use mocking, I would have to make my test deal with 
many other classes, functions, and attributes, which is undesirable due to the complexity
that it adds.&lt;/p&gt;
&lt;p&gt;Most of the time, mocking isn't necessary when writing unit tests, but there are some instances, such as the above
case, where it can come in handy. I'm glad that I took the time to learn the basics of mocking, and hopefully 
I'll be able to identify cases when it will be useful in the future. &lt;/p&gt;&lt;/div&gt;</description><guid>https://tristanknight.github.io/posts/mocking-in-python-unit-testing/</guid><pubDate>Sun, 16 Feb 2020 13:36:57 GMT</pubDate></item><item><title>Diagnosing an Error when Importing tkinter</title><link>https://tristanknight.github.io/posts/resolving-issue-with-tkinter/</link><dc:creator>Tristan Knight</dc:creator><description>&lt;div&gt;&lt;p&gt;A couple days ago I encountered a problem while working on a project using 
&lt;a href="https://docs.python.org/3/library/tkinter.html"&gt;tkinter&lt;/a&gt;,
a popular Python GUI package. At first glance, everything seemed
fine -- PyCharm appeared to recognize tkinter and nothing suggested anything was amiss. However, when
I tried running my program I got an error message that looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/initialerror.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;I first checked to make sure that I was using the appropriate syntax was importing
the correct tkinter. Perhaps the T needed to be capitalized? No, that's only when using Python 2. After
a couple minutes of Googling, I became confident that the problem was something else. 
Fortunately, the error message offered a helpful suggestion -- perhaps the Python 
I was using hadn't been correctly configured to work with Tk. &lt;/p&gt;
&lt;p&gt;After doing a bit more Google searching, it seemed that other people had experienced similar issues.
One commenter &lt;a href="https://github.com/pyenv/pyenv/issues/94#issuecomment-437180736"&gt;suggested&lt;/a&gt; that Mac OSX users install tcl-tk before installing Python with
pyenv. I ran &lt;code&gt;pyenv uninstall 3.8.0&lt;/code&gt; to uninstall Python, installed tcl-tk using &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;, and then reinstalled 
Python 3.8.0 using pyenv. 
I confirmed I was using the appropriate version of Python, then tried importing tkinter again, and got the same error message as before.
I ran &lt;code&gt;brew list&lt;/code&gt; and confirmed that Homebrew had in fact installed tcl-tk. I then ran &lt;code&gt;brew info tcl-tk&lt;/code&gt; and got this
helpful message:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/brewinfo.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;The message indicated that I needed to add tcl-tk to my PATH. 
I ran the suggested commands, and confirmed that the directives were added to my bash profile.
I tried importing tkinter again, and once again got the same message.
I asked a friend for advice, and she suggested that I uninstall Python again, and then 
run 
&lt;code&gt;env PYTHON_CONFIGURE_OPTS_ARRAY="--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'"&lt;/code&gt;
in my console before reinstalling Python. &lt;/p&gt;
&lt;p&gt;I did this, and this time when I ran &lt;code&gt;import tkinter&lt;/code&gt; I 
didn't get an error message. Excited, I ran &lt;code&gt;tkinter._test()&lt;/code&gt; and felt a sense of relief as a window 
popped up. My relief didn't last long, however, as I quickly noticed an error message in my console:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://tristanknight.github.io/images/finalerror.png" width="800"&gt;&lt;/p&gt;
&lt;p&gt;Additionally, I realized that the window that had appeared failed to display the correct information. Fortunately, 
the problem seemed clear from the error message: the tk.h version didn't match the libtk.a version. After doing a bit of 
Google searching for similar problems, I found that someone had 
&lt;a href="https://github.com/pyenv/pyenv/issues/1375#issuecomment-524280004"&gt;listed a series of steps&lt;/a&gt; to get the latest version of 
tcl-tk to work with the pyenv Python install. &lt;/p&gt;
&lt;p&gt;So I edited my python-build file, replacing &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$CONFIGURE_OPTS ${!PACKAGE_CONFIGURE_OPTS} 
"${!PACKAGE_CONFIGURE_OPTS_ARRAY}" || return 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$CONFIGURE_OPTS --with-tcltk-includes='-I/usr/local/opt/tcl-tk/include' --with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib 
-ltcl8.6 -ltk8.6' ${!PACKAGE_CONFIGURE_OPTS} "${!PACKAGE_CONFIGURE_OPTS_ARRAY}" || return 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I then re-installed Python, and then ran &lt;code&gt;echo -e 'if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n eval "$(pyenv init -)"\nfi' &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt;
to update my bash file.&lt;/p&gt;
&lt;p&gt;Finally, I re-started my command line, checked that I was using the right version of Python, successfully
ran &lt;code&gt;import tkinter&lt;/code&gt;, then ran &lt;code&gt;tkinter_test()&lt;/code&gt;. 
This time, the correct window appeared, and there was no error message in the terminal -- I had finally fixed the problem!&lt;/p&gt;
&lt;p&gt;When using so many different tools and technologies that interact in various ways, it's inevitable that 
sometimes things don't work as they should. Fortunately, there are only so many things that can go wrong, and oftentimes 
someone else has experienced the same problem and devised a solution. Even though this ended up being the case here, 
it still took me a few hours to resolve the tkinter issue. But while troubleshooting the problem was frustrating,
I ended up feeling  quite a bit of satisfaction after the test finally passed successfully. &lt;/p&gt;&lt;/div&gt;</description><guid>https://tristanknight.github.io/posts/resolving-issue-with-tkinter/</guid><pubDate>Thu, 13 Feb 2020 10:38:25 GMT</pubDate></item><item><title>Test-Driven Development</title><link>https://tristanknight.github.io/posts/test-driven-development/</link><dc:creator>Tristan Knight</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently, I've been working through &lt;a href="https://www.obeythetestinggoat.com/"&gt;Obey the Testing Goat!&lt;/a&gt;, 
a book that covers test-driven development for web-development with Django. 
Test-driven development (TDD) is a development practice in which developers first write tests and then 
write the code that is to be tested. This is in contrast to other practices in which code is tested after being written. 
Though I have encountered testing in the past, test-driven development's emphasis 
on writing tests first and is quite different from the programming styles I have used before.&lt;/p&gt;
&lt;h5&gt;Types of testing&lt;/h5&gt;
&lt;p&gt;In software development, two common types of tests are &lt;strong&gt;unit tests&lt;/strong&gt; and &lt;strong&gt;functional tests&lt;/strong&gt;. 
Functional tests are used to test whether a feature works correctly from the &lt;em&gt;user's&lt;/em&gt; perspective, 
for example, you may want to write a test to check whether a website displays the correct information, or if a button on a site
works as a it should. Functional tests are concerned with whether the feature being tested
works as it should, instead of whether or not the pieces of underlying code work correctly. Functional tests are often accompanied by a user-centered story that 
makes them readable even to people without a programming background. &lt;/p&gt;
&lt;p&gt;Unit tests, on the other hand, are used to ensure that the &lt;em&gt;code&lt;/em&gt; works as it should. 
Python has a built-in unittest module that includes helpful tools for writing tests. Django 
also has a django.test.TestCase module which contains some Django-specific features. In TDD,
every line of code should be unit-tested, and unit tests should be written before the code itself, which helps ensure that the developer
understands the purpose of the code before writing it. &lt;/p&gt;
&lt;h5&gt;The TDD process&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;Obey the Testing Goat&lt;/em&gt; also discusses the &lt;em&gt;TDD process&lt;/em&gt;, or TDD cycle, which can be summarized as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write a (functional or unit) test &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the test. If it passes, proceed to step 5, otherwise proceed to step 3.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify the reason for the test's failure and write the minimum amount of code needed to fix the error (even if 
the code isn't very well-written)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the test again, and if it passes proceed to step 5. Otherwise, go back to step 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify code that needs refactoring, and then refactor as necessary. After refactoring,
return to step 2 to ensure that the refactoring didn't inadvertently break the code. If the code does not need refactoring, continue
building the program by returning to step 1 and writing a test for another
piece of &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've found learning about test-driven development to be fascinating, and I can certainly see the utility of writing comprehensive tests
before writing code. However, I feel that the book does a better job of offering a high-level explanation of testing than it does of teaching you &lt;em&gt;how&lt;/em&gt; to write your own tests. 
Although there are plenty examples of tests given, it can be a little difficult translating these examples to actually writing your own tests for completely different programs. 
Therefore, I plan to practice writing unit tests and functional tests while working on person projects going forward in order 
to develop a better understanding of testing.  &lt;/p&gt;&lt;/div&gt;</description><guid>https://tristanknight.github.io/posts/test-driven-development/</guid><pubDate>Tue, 11 Feb 2020 11:52:12 GMT</pubDate></item><item><title>What I learned from using Git as a version control system</title><link>https://tristanknight.github.io/posts/first-post/</link><dc:creator>Tristan Knight</dc:creator><description>&lt;div&gt;&lt;p&gt;I've recently been learning how to use Git, and I can now see why it is such a popular version
control system. &lt;/p&gt;
&lt;h5&gt;What is Git and why is version control essential for programmers?&lt;/h5&gt;
&lt;p&gt;When working on a large project,
some type of version control system is essential -- one needs to be able to keep track of a project's changes and revert to 
a previous version if something goes wrong. Git also assists teams in coordinating work on a project, since it
gives each programmer access to a repository containing the full history of the project's codebase. In addition to simple version control, 
Git provides a multitude of features that improve developers' organization
and productivity. &lt;/p&gt;
&lt;h5&gt;How does Git work?&lt;/h5&gt;
&lt;p&gt;After installing and configuring Git, you can easily create a new repository by running the "git init" shell
command in your project's directory. &lt;/p&gt;
&lt;p&gt;A Git repository has three key areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Working Directory, which contains the files you can view and edit on your computer &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Staging Index, which contains files from the working directory which have been added to the staging 
    index by the user but have not yet been committed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Repository, where commits are stored&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;What are some of Git's key features?&lt;/h5&gt;
&lt;p&gt;For a thorough explanation of Git's features, see the &lt;a href="https://git-scm.com/doc"&gt;official 
Git documentation&lt;/a&gt;. However, I have included a sample of Git's key features, 
which give you the ability to do the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add changes to the staging index, and commit stages from the staging 
index to the repository with the "git add" and "git commit" commands.
 You can also remove or edit previous commits. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quickly check the commit history with the "git log" command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select which files you'd like Git to ignore &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a tag (such as a version number) to a particular commit with the "git tag" command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maintain parallel sets of changes with Git's branching functionality. Git's branching feature is key 
in allowing large teams of developers to work on multiple features of a project simultaneously. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ability to merge independent branches together. Git will also let the user know if there is a merge conflict 
(i.e. if the branches contain conflicting lines of code), which the will then need to resolve manually.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://tristanknight.github.io/posts/first-post/</guid><pubDate>Wed, 05 Feb 2020 09:45:52 GMT</pubDate></item></channel></rss>